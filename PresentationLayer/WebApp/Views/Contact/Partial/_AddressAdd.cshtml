@model Phonebook.PresentationLayer.Web.Models.AddressModel
@using Phonebook.BusinessLogicLayer.Managers;

@using (Html.BeginForm("AddAddress", "AddressDetails", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    Model.ParseIds = Model.Id + "/" + Model.Contact.Id + "/" + Model.Country.Id;
    @Html.HiddenFor(x => Model.ParseIds)
    <div class="info-table add-address" style="display:none;">
        <div class="addressDiv">
            @Html.EditorFor(x => x.Street, new { htmlAttributes = new { @class = "no-borders floatLeft address", required = "required"} })
            @Html.ValidationMessageFor(x => x.Street)
            <div class="floatLeft sepline">-</div>
            @Html.EditorFor(x => x.HouseNo, new { htmlAttributes = new { @class = "no-borders floatLeft houseNo", required = "required" } })
            @Html.ValidationMessageFor(x => x.HouseNo)
        </div>
        <div class="cityDiv">
            @Html.EditorFor(x => x.City, new { htmlAttributes = new { @class = "no-borders city", required = "required" } })
            @Html.ValidationMessageFor(x => x.City)
        </div>

        <div class="zipCodeDiv">
            @Html.EditorFor(x => x.ZipCode, new { htmlAttributes = new { @class = "no-borders zipCode", required = "required" } })
            @Html.ValidationMessageFor(x => x.ZipCode)
        </div>
        <div class="countriesDiv merge">
            @{
                Countries countriesManager = new Countries();
                IEnumerable<CountryModel> countries = countriesManager.GetAll().Select(x => (CountryModel)x);
            }
            @Html.DropDownListFor(x => x.Country.Id, new SelectList(countries, "Id", "Name", Model.Country.Id), new { @value="Serbia", @class = "no-borders-drop" })
            @Html.ValidationMessageFor(x => x.Country.Name)
        </div>
        <div class="addressTypeDiv merge">
            @{
                AddressTypes addressTypesManager = new AddressTypes();
                IEnumerable<AddressTypeModel> addressTypes = addressTypesManager.GetAll().Select(x => (AddressTypeModel)x);
                var addressTypesList = new SelectList(addressTypes, "Id", "Name", Model.AddressType?.Id);
            }
            @Html.DropDownListFor(x => x.AddressType.Id, addressTypesList, "None", new { @class = "no-borders-drop" })
            @Html.ValidationMessageFor(x => x.AddressType.Name)
        </div>
        <div>
            <input type="submit" value="Save" class="btn btn-success btn-xs">
        </div>

    </div>
    <button type="button" class="btn btn-block btn-default add-address-button">Add new address</button>
                }
